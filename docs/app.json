[{"name":"app.R","content":"\r\n# About this script -------------------------------------------------------\r\n\r\n# Dashboard for displaying selected data from the Irish Health Survey 2024 that is available by region\r\n# https://www.cso.ie/en/releasesandpublications/ep/p-ihsmr/irishhealthsurvey2024-mainresults/data/\r\n\r\n# This app:\r\n## (1) Imports the required data (already pulled in pull_cso_data.R script and saved)\r\n## (2) Selects an appropriate bar chart for each indicator based on the data \r\n## (3) Creates a bar chart and table for each indicator\r\n## (4) Displays the chart and table, with user options to select indicator, region, and chart layout\r\n\r\n# Author: Cian Dowling-Cullen\r\n# Last updated: 31 July 2025\r\n\r\n\r\n\r\n# Load packages -----------------------------------------------------------\r\n\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(dplyr)\r\nlibrary(stringr)\r\nlibrary(purrr)\r\nlibrary(munsell)   \r\n\r\n\r\n\r\n# Import data -------------------------------------------------------------\r\n\r\n# Data was pulled from CSO website using csodata R package and saved\r\nmeta               <- readRDS(\"ihs_data.rds\")\r\ntidy_list          <- meta$tidy_list\r\nmixed_codes        <- meta$mixed_codes\r\nfacet_stat_codes   <- meta$facet_stat_codes\r\nihs_codes          <- names(tidy_list)\r\n\r\n\r\n\r\n# Create plots ------------------------------------------------------------\r\n\r\n# Function to choose fill variable \r\npick_fill_var <- function(dat) {\r\n  \r\n  ## if multiple levels in Statistic, return Statistic as fill variable\r\n  if(nlevels(dat$Statistic) > 1) {\r\n    return(list(data = dat, var = \"Statistic\"))\r\n  }\r\n  \r\n  ## find other multi-level factors that might be additional variables\r\n  candidate_vars <- dat %>% \r\n    select(where(~ is.factor(.x) && nlevels(.x) > 1)) %>%    # keep multi-level factors\r\n    select(-any_of(c(\"Statistic\", \"Indicator\", \"Title\", \"HSE.Health.Regions\"))) %>%   # ignore those that we know aren't relevant\r\n    names()\r\n  \r\n  ## if any candidate variables meeting above criteria - return that. Else, return Statistic\r\n  list(data = dat,\r\n       var  = ifelse(length(candidate_vars), candidate_vars[1], \"Statistic\"))   \r\n}\r\n\r\n\r\n# Function to decide bar chart layout based on rules:\r\n## 1. If units = Number: side-by-side\r\n## 2. If mixed % and number (ad hoc defined at start): side-by-side\r\n## 3. If units = % and total for any region > 100 (+ tol): side-by-side\r\n## 4. Otherwise: stacked\r\ndecide_bar_layout <- function(dat, \r\n                              layout = \"auto\", \r\n                              tol = 0.5,\r\n                              is_mixed = FALSE) {\r\n  unit <- dat$Units[1]                       # \"%\" or \"Number\"\r\n  \r\n  ## if unit is %, check if total per region is >100 + tolerance \r\n  over_100 <- FALSE\r\n  if (unit == \"%\") {\r\n    over_100 <- dat %>% \r\n      group_by(HSE.Health.Regions) %>% \r\n      summarise(total = sum(`2024`, na.rm = TRUE), .groups = \"drop\") %>% \r\n      summarise(any(total > 100 + tol)) %>% \r\n      pull()\r\n  }\r\n  \r\n  ## define automatic position based on above rules\r\n  auto_pos <- case_when(\r\n    unit == \"Number\"         ~ \"dodge\",\r\n    is_mixed                 ~ \"dodge\",\r\n    unit == \"%\" & over_100   ~ \"dodge\",\r\n    TRUE                     ~ \"stack\"\r\n  )\r\n  \r\n  ## return position and subtitles\r\n  list(\r\n    position = ifelse(layout == \"auto\", auto_pos, layout), # position can be overriden by user\r\n    subtitle_lab = case_when(\r\n      unit == \"Number\"         ~ \"Number\",\r\n      is_mixed                 ~ \"% & number\",\r\n      TRUE                     ~ \"%\"\r\n    )\r\n  )  \r\n}\r\n\r\n\r\n# Function to create bar chart for selected indicator\r\nplot_indicator_2024 <- function(tbl_list,\r\n                                code,\r\n                                layout = \"auto\",   # bar chart layout (user override or 'auto')\r\n                                tol = 0.5) {       # tolerance for deciding stacked vs side-by-side (how much >100% is allowable for stacked)\r\n  dat <- tbl_list[[code]]\r\n  \r\n  ## get values using functions above\r\n  pf <- pick_fill_var(dat)\r\n  dat <- pf$data\r\n  fill_var <- pf$var\r\n  lay <- decide_bar_layout(dat, layout, tol, code %in% mixed_codes)\r\n  \r\n  ## build the base plot\r\n  p <- ggplot(dat, aes(x = HSE.Health.Regions,\r\n                       y = `2024`,\r\n                       fill = .data[[fill_var]])) +\r\n    geom_col(position = lay$position) +\r\n    theme_minimal() +\r\n    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +\r\n    labs(title    = dat$Title[1],\r\n         subtitle = lay$subtitle_lab,\r\n         x = NULL, y = NULL)\r\n  \r\n  ## change colour scheme for IH437 (required as it has many categories)\r\n  if (code == \"IH437\") {\r\n    n_cols <- nlevels(dat[[fill_var]])\r\n    if (n_cols <= 12) {\r\n      p <- p + scale_fill_brewer(palette = \"Set3\", drop = FALSE)\r\n    } else {\r\n      p <- p + scale_fill_manual(\r\n        values = scales::hue_pal(h = c(15, 375), c = 100, l = 65)(n_cols),\r\n        drop   = FALSE\r\n      )\r\n    }\r\n  }\r\n  \r\n  ## faceting for special cases\r\n  if (code %in% mixed_codes) {\r\n    p <- p + facet_wrap(~ Statistic, nrow = 1)\r\n  } else if (code %in% facet_stat_codes) {\r\n    p <- p + facet_wrap(~ Category, nrow = 1)\r\n  }\r\n  \r\n  p\r\n}\r\n\r\n\r\n# Clean indicator names for dropdown menu\r\nindicator_choices <- set_names(\r\n  ihs_codes,                                                    \r\n  str_glue(\"{ihs_codes} – {map_chr(ihs_codes, ~ tidy_list[[.x]]$Title[1])}\")\r\n)\r\n\r\n# Clean region names for dropdown menu\r\nregion_levels  <- tidy_list[[1]] %>%                           \r\n  arrange(match(HSE.Health.Regions,         \r\n                c(\"All HSE Regions\",\r\n                  \"HSE Dublin and Midlands\",\r\n                  \"HSE Dublin and North East\",\r\n                  \"HSE Mid West\",\r\n                  \"HSE North West\",\r\n                  \"HSE South\",\r\n                  \"HSE South East\"))) %>% \r\n  distinct(HSE.Health.Regions) %>% \r\n  pull()\r\nregion_choices <- set_names(region_levels)                  \r\n\r\n\r\n\r\n# UI ----------------------------------------------------------------------\r\n\r\nui <- fluidPage(\r\n  \r\n  # app title\r\n  titlePanel(\"Selected Irish Health Survey 2024 Results by HSE Region\"),\r\n  \r\n  tabsetPanel(\r\n    \r\n    ## tab 1: Dashboard\r\n    tabPanel(\"Dashboard\",\r\n             \r\n             # sidebar with dropdowns to select indicator and region\r\n             sidebarLayout(\r\n               sidebarPanel(\r\n                 \r\n                 ## searchable indicator selector\r\n                 selectizeInput(\r\n                   inputId  = \"indicator\",\r\n                   label    = \"Indicator:\",\r\n                   choices  = indicator_choices,\r\n                   multiple = TRUE,\r\n                   selected = NULL,\r\n                   options  = list(\r\n                     maxItems       = 1,\r\n                     placeholder    = \"Type to search…\",\r\n                     openOnFocus    = TRUE,\r\n                     dropdownParent = 'body'\r\n                   )\r\n                 ),\r\n                 \r\n                 ## searchable region selector\r\n                 selectizeInput(\r\n                   inputId  = \"regions\",\r\n                   label    = \"Region(s):\",\r\n                   choices  = region_choices,          \r\n                   multiple = TRUE,                    # allow multiple regions to be selected\r\n                   selected = character(0),            # start with nothing chosen\r\n                   options  = list(placeholder = \"Select region(s)\")\r\n                 ),\r\n                 \r\n                 radioButtons(\"layout\", \"Bar layout:\",\r\n                              choices = c(\"Auto\" = \"auto\", \"Stack\" = \"stack\", \"Side by side\" = \"dodge\"),\r\n                              inline  = TRUE\r\n                 )\r\n               ),\r\n               \r\n               ## show plot for selected indicator\r\n               mainPanel(\r\n                 plotOutput(\"ih_plot\", height = 450),\r\n                 br(),\r\n                 tableOutput(\"raw_table\")\r\n               )\r\n             )\r\n    ),\r\n    \r\n    ## tab 2: About\r\n    tabPanel(\"About\",\r\n             tags$div(\r\n               style = \"max-width: 900px; margin-top: 20px;\",\r\n               tags$p(\r\n                 \"This dashboard displays Central Statistics Office data from the \",\r\n                 tags$a(\r\n                   href = \"https://www.cso.ie/en/releasesandpublications/ep/p-ihsmr/irishhealthsurvey2024-mainresults/data/\",\r\n                   \"Irish Health Survey 2024\", target = \"_blank\"\r\n                 ),\r\n                 \". It displays selected results from the survey that are broken down by HSE Region and uses publicly available data retrieved with the \",\r\n                 tags$a(href = \"https://cran.r-project.org/package=csodata\",\r\n                        \"csodata R package\", target = \"_blank\"),\r\n                 \".\"\r\n               ),\r\n               tags$p(\r\n                 \"Full source code and additional notes are available on \",\r\n                 tags$a(href = \"https://github.com/<your‑GitHub‑repo>\",\r\n                        \"GitHub\", target = \"_blank\"), \".\"\r\n               )\r\n             )\r\n    )   \r\n    \r\n  )      \r\n)\r\n\r\n\r\n\r\n\r\n# Server ------------------------------------------------------------------\r\n\r\nserver <- function(input, output) {\r\n  \r\n  # reactive list: data for the chosen regions \r\n  filtered_list <- reactive({\r\n    req(length(input$regions) > 0)            # wait until user selects at least one region\r\n    \r\n    map(tidy_list,                            # keep only the rows selected\r\n        ~ .x |> filter(HSE.Health.Regions %in% input$regions))\r\n  })\r\n  \r\n  # bar chart\r\n  output$ih_plot <- renderPlot({\r\n    validate(need(length(input$indicator) == 1,\r\n                  \"Please select an indicator\"),\r\n             need(length(input$regions)    > 0,\r\n                  \"Please select one or more regions\"))\r\n    \r\n    plot_indicator_2024(\r\n      filtered_list(),\r\n      input$indicator[1],    \r\n      layout = input$layout\r\n    )\r\n  })\r\n  \r\n  # table\r\n  output$raw_table <- renderTable({\r\n    validate(\r\n      need(length(input$indicator) == 1, \"Please select an indicator\"),\r\n      need(length(input$regions)   > 0,  \"Please select one or more regions\")\r\n    )\r\n    \r\n    filtered_list()[[ input$indicator[1] ]] |>\r\n      rename(Value = `2024`) |>\r\n      select(Statistic, HSE.Health.Regions, everything()) |>\r\n      select(-any_of(c(\"Title\", \"Indicator\", \"Units\"))) |>\r\n      arrange(Statistic, HSE.Health.Regions) |>\r\n      ## clean table headings\r\n      rename_with(~ gsub(\"\\\\.\", \" \", .x))        \r\n  }, rownames = FALSE)\r\n  \r\n}\r\n\r\n# Run ---------------------------------------------------------------------\r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\n","type":"text"},{"name":"ihs_2024_dashboard_gt.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"},{"name":"ihs_data.rds","content":"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\nQ/l+IF9S/n+2zEKJAy8CAA==","type":"binary"},{"name":"pull_cso_data.R","content":"\r\n\r\n# About this script -------------------------------------------------------\r\n\r\n# Pulls data for dashboard that will display selected data from the Irish Health Survey 2024 that is available by region\r\n# https://www.cso.ie/en/releasesandpublications/ep/p-ihsmr/irishhealthsurvey2024-mainresults/data/\r\n# This script pulls the required data using the csodata package\r\n\r\n# Author: Cian Dowling-Cullen\r\n# Last updated: 31 July 2025\r\n\r\n\r\n\r\n# Load packages -----------------------------------------------------------\r\n\r\npacman::p_load(\r\n  shiny,\r\n  tidyverse,\r\n  purrr,\r\n  stringr,\r\n  dplyr,\r\n  csodata\r\n)\r\n\r\n\r\n\r\n# Import data -------------------------------------------------------------\r\n\r\n# Define required tables\r\nihs_codes <- c(\r\n  \"IH361\",\"IH363\",\"IH366\",\"IH370\",\"IH373\",\"IH376\",\"IH382\",\"IH388\",\"IH391\",\"IH394\",\"IH397\",\r\n  \"IH401\",\"IH405\",\"IH408\",\"IH411\",\"IH413\",\"IH415\",\"IH422\",\"IH425\",\"IH428\",\"IH431\",\"IH434\",\r\n  \"IH437\",\"IH442\",\"IH451\",\"IH453\",\"IH455\",\"IH458\",\"IH461\",\"IH464\",\"IH468\",\"IH470\",\"IH474\",\r\n  \"IH477\",\"IH480\",\"IH483\",\"IH486\",\"IH489\",\"IH492\",\"IH495\"\r\n)\r\n\r\n\r\n# Classify IH382 as mixed. Necassary as units given as \"%\" in metadata for IH382\r\n# but it actually has a numberic variable as well in table. \r\nmixed_codes <- c(\"IH382\")\r\n\r\n\r\n# Also classify IH437 for faceting (has multiple mutually-exclusive categories in the table)\r\nfacet_stat_codes <- c(\"IH437\") \r\n\r\n\r\n# Function to pull required tables using csodata package, and corresponding titles and units from metadata\r\npull_cso_data <- function(code) {\r\n  meta <- cso_get_meta(code)\r\n  dat <- cso_get_data(code) %>% \r\n    rename(HSE.Health.Regions = any_of(\"HSE.Health.Region\")) %>%    # change singular to plural, as some tables have singular\r\n    mutate(\r\n      Indicator = code,\r\n      Title     = meta$Title,        # pull title from the metadata\r\n      Units     = meta$Units         # needed for deciding chart layout later\r\n    )\r\n  \r\n  # add category prefix for faceting if table in facet_stat_codes\r\n  if (code %in% facet_stat_codes) {\r\n    cat_lab <- function(x) {\r\n      x |>\r\n        str_replace(\"\\\\s+[–-]\\\\s+.*$\", \"\") |>  # remove suffix\r\n        str_squish()\r\n    }\r\n    dat <- dat %>%\r\n      mutate(\r\n        Category = factor(cat_lab(Statistic),\r\n                          levels = unique(cat_lab(Statistic)))\r\n      )\r\n  }\r\n  dat                    \r\n}\r\n\r\n# Create tidy list including all of the required data tables\r\ntidy_list <- map(set_names(ihs_codes), pull_cso_data)\r\n\r\nmeta <- list(\r\n  tidy_list        = tidy_list,\r\n  mixed_codes      = mixed_codes,\r\n  facet_stat_codes = facet_stat_codes\r\n)\r\n\r\nsaveRDS(meta, \"ihs_data.rds\")\r\n\r\n","type":"text"}]
